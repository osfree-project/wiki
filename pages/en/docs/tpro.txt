====== TPCrt ======

===== FrameWindow =====

<code pascal>
procedure FrameWindow(LeftCol, TopRow, RightCol, BotRow, FAttr, HAttr : Byte; Header : shortstring);
</code>

Draw a frame around a window

===== WhereXAbs =====

<code pascal>
function WhereXAbs: Byte;
</code>

Return absolute column coordinate of cursor

===== WhereYAbs =====

<code pascal>function WhereYAbs: Byte;</code>

Return absolute row coordinate of cursor

===== WhereXY =====

<code pascal>function WhereXY: Word;</code>

Return absolute coordinates of cursor

===== ScreenX =====

<code pascal>function ScreenX: Byte;</code>

Return absolute column coordinate of cursor

===== ScreenY =====

<code pascal>function ScreenY: Byte;</code>

Return absolute row coordinate of cursor

===== FastWrite =====

<code pascal>procedure FastWrite(St : string; Row, Col, Attr : Byte);</code>

Write St at Row,Col in Attr (video attribute) without snow

===== SetFrameChars =====

<code pascal>procedure SetFrameChars(Vertical, Horizontal, LowerRight, UpperRight, LowerLeft, UpperLeft : Char);</code>

Sets the frame characters to be used on subsequent FrameWindow calls.

===== WhereXYdirect =====

<code pascal>procedure WhereXYdirect(var X, Y : Byte);</code>

Read the current position of the cursor directly from the CRT controller

===== GetCrtMode =====

<code pascal>function GetCrtMode : Byte;</code>

Get the current video mode. Also reinitializes internal variables. May reset: CurrentMode, ScreenWidth, ScreenHeight, CurrentPage, and VideoSegment.

===== GotoXYAbs =====

<code pascal>procedure GotoXYAbs(X, Y : Byte);</code>

Move cursor to column X, row Y. No error checking done.

===== SetVisiblePage =====

<code pascal>procedure SetVisiblePage(PageNum : Byte);</code>

Set current video page

===== ScrollWindowUp =====

<code pascal>procedure ScrollWindowUp(XLo, YLo, XHi, YHi, Lines : Byte);</code>

Scrolls the designated window up the specified number of lines.

===== ScrollWindowDown =====

<code pascal>procedure ScrollWindowDown(XLo, YLo, XHi, YHi, Lines : Byte);</code>

Scrolls the designated window down the specified number of lines.

===== CursorTypeSL =====

<code pascal>function CursorTypeSL : Word;</code>

Returns a word. High byte has starting scan line, low byte has ending.

===== CursorStartLine =====
 
<code pascal>function CursorStartLine : Byte;</code>

Returns the starting scan line of the cursor

===== CursorEndLine =====

<code pascal>function CursorEndLine : Byte;</code>

Returns the ending scan line of the cursor.

===== SetCursorSize =====

<code pascal>procedure SetCursorSize(Startline, EndLine : Byte);</code>

Sets the cursor's starting and ending scan lines.

===== NormalCursor =====

<code pascal>procedure NormalCursor;</code>

Set normal scan lines for cursor based on current video mode

===== FatCursor =====

<code pascal>procedure FatCursor;</code>

Set larger scan lines for cursor based on current video mode

===== BlockCursor =====

<code pascal>procedure BlockCursor;</code>

Set scan lines for a block cursor

===== HiddenCursor =====

<code pascal>procedure HiddenCursor;</code>

Hide the cursor

===== ReadCharAtCursor =====

<code pascal>function ReadCharAtCursor: Char;</code>

Returns character at the current cursor location on the selected page.

===== ReadAttrAtCursor =====

<code pascal>function ReadAttrAtCursor: Byte;</code>

Returns attribute at the current cursor location on the selected page.

===== GetCursorState =====

<code pascal>procedure GetCursorState(var XY, ScanLines: Word);</code>

Return the current position and size of the cursor

===== RestoreCursorState =====

<code pascal>procedure RestoreCursorState(XY, ScanLines: Word);</code>

Reset the cursor to a position and size saved with GetCursorState

===== FastWriteWindow =====

<code pascal>procedure FastWriteWindow(St: string; Row, Col, Attr: Byte);</code>

Write a string using window-relative coordinates

===== FastText =====

<code pascal>procedure FastText(St: string; Row, Col: Byte);</code>

Write St at Row,Col without changing the underlying video attribute.

===== FastTextWindow =====

<code pascal>procedure FastTextWindow(St: string; Row, Col: Byte);</code>

Write St at window Row,Col without changing the underlying video attribute.

===== FastVert =====

<code pascal>procedure FastVert(St: string; Row, Col, Attr: Byte);</code>

Write St vertically at Row,Col in Attr (video attribute)

===== FastVertWindow =====

<code pascal>procedure FastVertWindow(St: string; Row, Col, Attr: Byte);</code>

Write a string vertically using window-relative coordinates

===== FastFill =====

<code pascal>procedure FastFill(Number: Word; Ch: Char; Row, Col, Attr: Byte);</code>

Fill Number chs at Row,Col in Attr (video attribute) without snow

===== FastFillWindow =====

<code pascal>procedure FastFillWindow(Number: Word; Ch: Char; Row, Col, Attr: Byte);</code>

Fill Number chs at window Row,Col in Attr (video attribute) without snow

===== FastCenter =====

<code pascal>procedure FastCenter(St: string; Row, Attr: Byte);</code>

Write St centered on window Row in Attr (video attribute) without snow

===== FastFlush =====

<code pascal>procedure FastFlush(St: string; Row, Attr: Byte);</code>

Write St flush right on window Row in Attr (video attribute) without snow

===== FastRead =====

<code pascal>procedure FastRead(Number, Row, Col: Byte; var St: string);</code>

Read Number characters from the screen into St starting at Row,Col

===== FastReadWindow =====

<code pascal>procedure FastReadWindow(Number, Row, Col: Byte; var St: string);</code>

Read Number characters from the screen into St starting at window Row,Col

===== ReadAttribute =====
<code pascal>procedure ReadAttribute(Number, Row, Col: Byte; var St: string);</code>

Read Number attributes from the screen into St starting at Row,Col

===== ReadAttributeWindow =====

<code pascal>procedure ReadAttributeWindow(Number, Row, Col: Byte; var St: string);</code>

Read Number attributes from the screen into St starting at window Row,Col

===== WriteAttribute =====

<code pascal>procedure WriteAttribute(St: String; Row, Col: Byte);</code>

Write string of attributes St at Row,Col without changing characters

===== WriteAttributeWindow =====

<code pascal>procedure WriteAttributeWindow(St: String; Row, Col: Byte);</code>

Write string of attributes St at window Row,Col without changing characters

===== ChangeAttribute =====

<code pascal>procedure ChangeAttribute(Number: Word; Row, Col, Attr: Byte);</code>

Change Number video attributes to Attr starting at Row,Col

===== ChangeAttributeWindow =====

<code pascal>procedure ChangeAttributeWindow(Number: Word; Row, Col, Attr: Byte);</code>

Change Number video attributes to Attr starting at window Row,Col

===== MoveScreen =====

<code pascal>procedure MoveScreen(var Source, Dest; Length : Word);</code>

Move Length words from Source to Dest without snow

===== FlexWrite =====

<code pascal>procedure FlexWrite(St : string; Row, Col : Byte; var FAttrs : FlexAttrs);</code>

Write St at Row,Col with flexible color handling

===== FlexWriteWindow =====

<code pascal>procedure FlexWriteWindow(St :string; Row, Col: Byte; var FAttrs: FlexAttrs);</code>

Write a string flexibly using window-relative coordinates.

===== SaveWindow =====

<code pascal>function SaveWindow(XLow, YLow, XHigh, YHigh : Byte; Allocate : Boolean; var Covers : Pointer) : Boolean;</code>

Allocate buffer space if requested and save window contents

===== RestoreWindow =====

<code pascal>procedure RestoreWindow(XLow, YLow, XHigh, YHigh : Byte; Deallocate : Boolean; var Covers : Pointer);</code>

Restore screen contents and deallocate buffer space if requested

===== StoreWindowCoordinates =====

<code pascal>procedure StoreWindowCoordinates(var WC : WindowCoordinates);</code>

Store the window coordinates for the active window

===== RestoreWindowCoordinates =====

<code pascal>procedure RestoreWindowCoordinates(WC : WindowCoordinates);</code>

Restore previously saved window coordinates

===== PackWindow =====

<code pascal>function PackWindow(XLow, YLow, XHigh, YHigh : Byte) : PackedWindowPtr;</code>

Return a pointer to a packed window, or nil if not enough memory

===== DispPackedWindow =====

<code pascal>procedure DispPackedWindow(PWP : PackedWindowPtr);</code>

Display the packed window pointed to by PWP

===== DispPackedWindowAt =====

<code pascal>procedure DispPackedWindowAt(PWP : PackedWindowPtr; Row, Col : Byte);</code>

Display the packed window pointed to by PWP at Row,Col. If necessary, the coordinates are adjusted to allow it to fit on the screen.

===== MapPackedWindowColors =====

<code pascal>procedure MapPackedWindowColors(PWP : PackedWindowPtr);</code>

Map the colors in a packed window for improved appearance on mono/B&W displays

===== DisposePackedWindow =====

<code pascal>procedure DisposePackedWindow(var PWP : PackedWindowPtr);</code>

Dispose of a packed window, setting PWP to nil on exit

===== WritePackedWindow =====

<code pascal>procedure WritePackedWindow(PWP : PackedWindowPtr; FName : string);</code>

Store the packed window pointed to by PWP in FName

===== ReadPackedWindow =====

<code pascal>function ReadPackedWindow(FName : string) : PackedWindowPtr;</code>

Read the packed window stored in FName into memory

===== CreateLibrary =====

<code pascal>function CreateLibrary(var F : file; Name : string; Entries : Byte) : DirectoryPtr;</code>

Create a library with the specified # of directory entries

===== OpenLibrary =====

<code pascal>function OpenLibrary(var F : file; Name : string) : DirectoryPtr;</code>

Open the specified library and return a pointer to its directory

===== CloseLibrary =====

<code pascal>procedure CloseLibrary(var F : file; var DP : DirectoryPtr);</code>

Close library F and deallocate its directory

===== PackLibrary =====

<code pascal>procedure PackLibrary(LName : string);</code>

Pack a library to remove deleted entries.

===== AddWindowToLibrary =====

<code pascal>procedure AddWindowToLibrary(PWP : PackedWindowPtr; var F : file; DP : DirectoryPtr; WinName : LibName);</code>

Add a packed window to the specified library

===== ReadWindowFromLibrary =====

<code pascal>function ReadWindowFromLibrary(var F : file; DP : DirectoryPtr; WinName : LibName) : PackedWindowPtr;</code>

Read a packed window from a library

===== DeleteWindowFromLibrary =====

<code pascal>procedure DeleteWindowFromLibrary(var F : file; DP : DirectoryPtr; WinName : LibName);</code>

Delete a packed window from the specified library

===== MapColor =====

<code pascal>function MapColor(c : Byte) : Byte;</code>

Map a video attribute for visibility on mono/bw displays

===== SetBlink =====

<code pascal>procedure SetBlink(Status : Boolean);</code>

Enable text mode attribute blinking if On is True

===== SetCrtBorder =====

<code pascal>procedure SetCrtBorder(Attr : Byte);</code>

Set border to background color if card type and mode allow

===== Font8x8Selected =====

<code pascal>function Font8x8Selected : Boolean;</code>

Return True if EGA or VGA is active and in 8x8 font

===== SelectFont8x8 =====

<code pascal>procedure SelectFont8x8(Status : Boolean);</code>

Toggle 8x8 font on or off

===== HercPresent =====

<code oascal>function HercPresent : Boolean;</code>

Return true if a Hercules graphics card is present

===== SwitchInColorCard =====

<code pascal>procedure SwitchInColorCard(ColorOn : Boolean);</code>

Activate or deactivate colors on a Hercules InColor card

function HercGraphicsMode : Boolean;
  {-Return True if a Hercules card is in graphics mode}

function HercModeTestWorks : Boolean;
  {-Return True if HercGraphicsMode will work}

procedure SetHercMode(GraphMode : Boolean; GraphPage : Byte);
  {-Set Hercules card to graphics mode or text mode, and activate specified
   graphics page (if switching to graphics mode).}

function ReadKeyWord : Word;
  {-Waits for keypress, then returns scan and character codes together}

function CheckKbd(var KeyCode : Word) : Boolean;
  {-Returns True (and the key codes) if a keystroke is waiting}

function KbdFlags : Byte;
  {-Returns keyboard status flags as a bit-coded byte}

procedure StuffKey(W : Word);
  {-Stuff one key into the keyboard buffer}

procedure StuffString(S : string);
  {-Stuff the contents of S into the keyboard buffer}

procedure ReInitCrt;
  {-Reinitialize CRT unit's internal variables. For TSR's or programs with
   DOS shells. May reset: CurrentMode, ScreenWidth, ScreenHeight,
   WindMin/WindMax, CurrentPage, CurrentDisplay, CheckSnow, and VideoSegment}

{$ifdef WIN32}
procedure SetSafeCPSwitching(F: Boolean);
procedure SetUseACP(F: Boolean);
{$ENDIF}


procedure AssignConToCrt;

procedure ClrScr;
  {-Clears the screen and returns the cursor to the upper-left corner}

procedure TextBackground(Color: Byte);
  {-Selects the background color}

procedure TextColor(Color: Byte);
  {-Selects the foreground character color}

procedure Window(X1,Y1,X2,Y2: Byte);
  {-Defines a text window on the screen}

procedure GotoXY(X,Y: Byte);
  {-Moves the cursor to the given coordinates within the screen}

function WhereX: Byte;
  {-Returns the X coordinate of the current cursor location}

function WhereY: Byte;
  {-Returns the Y coordinate of the current cursor location}

procedure ClrEol;
  {-Clears all characters from the cursor position to the end of the line }
  { without moving the cursor.                                            }

function KeyPressed: Boolean;
  {-Determines if a key has been pressed on the keyboard and returns True }
  { if a key has been pressed                                             }

function ReadKey: Char;
  {-Reads a character from the keyboard and returns a character or an     }
  { extended scan code.                                                   }

procedure TextMode (Mode: word);
procedure InsLine;
  {-Inserts an empty line at the cursor position}

procedure DelLine;
  {-Deletes the line containing the cursor}

procedure LowVideo;
  {-Selects low intensity characters}

procedure HighVideo;
  {-Selects high-intensity characters}

procedure NormVideo;
  {-Selects normal intensity characters}

procedure Delay(MS: Word);
procedure Sound(Hz: Word);
procedure NoSound;
procedure AssignCrt(var F: Text);
  {-Associates a text file with CRT device.}

procedure PlaySound(Freq,Duration: Longint);
  {-Setups window coordinates }

procedure GetLastMode;
